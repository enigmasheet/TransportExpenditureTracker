@model TransportExpenditureTracker.Models.Invoice

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Invoice</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="InvoiceNo" class="control-label"></label>
                <input asp-for="InvoiceNo" class="form-control" />
                <span asp-validation-for="InvoiceNo" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Miti" class="control-label"></label>
                <input asp-for="Miti" class="form-control" />
                <span asp-validation-for="Miti" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="PartyId" class="control-label"></label>
                <select asp-for="PartyId" class ="form-control" asp-items="ViewBag.PartyId"></select>
            </div>
            <button class="btn btn-primary" onclick="openAddPartyModal()">Add Party</button>
            <div class="form-group">
                <label asp-for="Item" class="control-label"></label>
                <input asp-for="Item" class="form-control" />
                <span asp-validation-for="Item" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Quantity" class="control-label"></label>
                <input asp-for="Quantity" class="form-control" id="Quantity" />
                <span asp-validation-for="Quantity" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Rate" class="control-label"></label>
                <input asp-for="Rate" class="form-control" id="Rate" />
                <span asp-validation-for="Rate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="TaxableAmount" class="control-label"></label>
                <input asp-for="TaxableAmount" class="form-control" id="TaxableAmount" readonly />
                <span asp-validation-for="TaxableAmount" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="VatAmount" class="control-label"></label>
                <input asp-for="VatAmount" class="form-control" id="VatAmount" readonly />
                <span asp-validation-for="VatAmount" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="TotalInvoiceAmount" class="control-label"></label>
                <input asp-for="TotalInvoiceAmount" class="form-control" id="TotalInvoiceAmount" readonly />
                <span asp-validation-for="TotalInvoiceAmount" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="CreatedAt" class="control-label"></label>
                <input asp-for="CreatedAt" class="form-control" />
                <span asp-validation-for="CreatedAt" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="UpdatedAt" class="control-label"></label>
                <input asp-for="UpdatedAt" class="form-control" />
                <span asp-validation-for="UpdatedAt" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    <script>
        function calculateInvoiceAmounts() {
            const quantity = parseFloat(document.getElementById("Quantity").value) || 0;
            const rate = parseFloat(document.getElementById("Rate").value) || 0;

            const taxableInput = document.getElementById("TaxableAmount");
            let taxableAmount = 0;

            if (rate > 0) {
                taxableAmount = quantity * rate;
                taxableInput.value = taxableAmount.toFixed(2);
                taxableInput.readOnly = true;
            } else {
                taxableAmount = parseFloat(taxableInput.value) || 0;
                taxableInput.readOnly = false;
            }

            const vatAmount = taxableAmount * 0.13;
            const totalAmount = taxableAmount + vatAmount;

            document.getElementById("VatAmount").value = vatAmount.toFixed(2);
            document.getElementById("TotalInvoiceAmount").value = totalAmount.toFixed(2);


        }

        document.getElementById("Quantity").addEventListener("input", calculateInvoiceAmounts);
        document.getElementById("Rate").addEventListener("input", calculateInvoiceAmounts);
        document.getElementById("TaxableAmount").addEventListener("input", calculateInvoiceAmounts);
    </script>
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

